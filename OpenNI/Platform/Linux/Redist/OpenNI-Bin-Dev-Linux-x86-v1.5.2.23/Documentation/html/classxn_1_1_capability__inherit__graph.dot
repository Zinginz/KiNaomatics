digraph G
{
  edge [fontname="FreeSans",fontsize="10",labelfontname="FreeSans",labelfontsize="10"];
  node [fontname="FreeSans",fontsize="10",shape=record];
  Node1 [label="{xn::Capability\n||+ Capability()\l+ Capability()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node2 [label="{xn::NodeWrapper\n|- m_hNode\l- m_hShuttingDownCallback\l|+ NodeWrapper()\l+ NodeWrapper()\l+ operator=()\l+ ~NodeWrapper()\l+ operator XnNodeHandle()\l+ GetHandle()\l+ operator==()\l+ operator!=()\l+ IsValid()\l+ GetName()\l+ AddRef()\l+ Release()\l+ Ref()\l+ Unref()\l+ SetHandle()\l+ TakeOwnership()\l- ContextShuttingDownCallback()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_node_wrapper.html"];
  Node1 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node3 [label="{xn::AlternativeViewPointCapability\n||+ AlternativeViewPointCapability()\l+ AlternativeViewPointCapability()\l+ IsViewPointSupported()\l+ SetViewPoint()\l+ ResetViewPoint()\l+ IsViewPointAs()\l+ RegisterToViewPointChange()\l+ UnregisterFromViewPointChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_alternative_view_point_capability.html"];
  Node1 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node4 [label="{xn::AntiFlickerCapability\n||+ AntiFlickerCapability()\l+ AntiFlickerCapability()\l+ SetPowerLineFrequency()\l+ GetPowerLineFrequency()\l+ RegisterToPowerLineFrequencyChange()\l+ UnregisterFromPowerLineFrequencyChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_anti_flicker_capability.html"];
  Node1 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node5 [label="{xn::CroppingCapability\n||+ CroppingCapability()\l+ CroppingCapability()\l+ SetCropping()\l+ GetCropping()\l+ RegisterToCroppingChange()\l+ UnregisterFromCroppingChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_cropping_capability.html"];
  Node1 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node6 [label="{xn::DeviceIdentificationCapability\n||+ DeviceIdentificationCapability()\l+ DeviceIdentificationCapability()\l+ GetDeviceName()\l+ GetVendorSpecificData()\l+ GetSerialNumber()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_device_identification_capability.html"];
  Node1 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node7 [label="{xn::ErrorStateCapability\n||+ ErrorStateCapability()\l+ ErrorStateCapability()\l+ GetErrorState()\l+ RegisterToErrorStateChange()\l+ UnregisterFromErrorStateChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_error_state_capability.html"];
  Node1 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node8 [label="{xn::FrameSyncCapability\n||+ FrameSyncCapability()\l+ FrameSyncCapability()\l+ RegisterToFrameSyncChange()\l+ UnregisterFromFrameSyncChange()\l+ CanFrameSyncWith()\l+ FrameSyncWith()\l+ StopFrameSyncWith()\l+ IsFrameSyncedWith()\l* CanFrameSyncWith()\l* FrameSyncWith()\l* StopFrameSyncWith()\l* IsFrameSyncedWith()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_frame_sync_capability.html"];
  Node1 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node9 [label="{xn::GeneralIntCapability\n|- m_strCap\l|+ GeneralIntCapability()\l+ GeneralIntCapability()\l+ GetRange()\l+ Get()\l+ Set()\l+ RegisterToValueChange()\l+ UnregisterFromValueChange()\l* RegisterToValueChange()\l* UnregisterFromValueChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_general_int_capability.html"];
  Node1 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node10 [label="{xn::HandTouchingFOVEdgeCapability\n||+ HandTouchingFOVEdgeCapability()\l+ HandTouchingFOVEdgeCapability()\l+ RegisterToHandTouchingFOVEdge()\l+ UnregisterFromHandTouchingFOVEdge()\l- HandTouchingFOVEdgeCB()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_hand_touching_f_o_v_edge_capability.html"];
  Node1 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node11 [label="{xn::MirrorCapability\n||+ MirrorCapability()\l+ MirrorCapability()\l+ SetMirror()\l+ IsMirrored()\l+ RegisterToMirrorChange()\l+ UnregisterFromMirrorChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_mirror_capability.html"];
  Node1 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node12 [label="{xn::PoseDetectionCapability\n||+ PoseDetectionCapability()\l+ PoseDetectionCapability()\l+ GetNumberOfPoses()\l+ GetAvailablePoses()\l+ GetAllAvailablePoses()\l+ IsPoseSupported()\l+ GetPoseStatus()\l+ StartPoseDetection()\l+ StopPoseDetection()\l+ StopSinglePoseDetection()\l+ RegisterToPoseCallbacks()\l+ UnregisterFromPoseCallbacks()\l+ RegisterToPoseDetected()\l+ RegisterToOutOfPose()\l+ UnregisterFromPoseDetected()\l+ UnregisterFromOutOfPose()\l+ RegisterToPoseInProgress()\l+ UnregisterFromPoseInProgress()\l- PoseDetectionStartBundleCallback()\l- PoseDetectionStartEndBundleCallback()\l- PoseDetectionCallback()\l- PoseDetectionInProgressCallback()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_pose_detection_capability.html"];
  Node1 -> Node13 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node13 [label="{xn::SkeletonCapability\n||+ SkeletonCapability()\l+ SkeletonCapability()\l+ IsJointAvailable()\l+ IsProfileAvailable()\l+ SetSkeletonProfile()\l+ SetJointActive()\l+ IsJointActive()\l+ IsJointActive()\l+ RegisterToJointConfigurationChange()\l+ UnregisterFromJointConfigurationChange()\l+ EnumerateActiveJoints()\l+ GetSkeletonJoint()\l+ GetSkeletonJointPosition()\l+ GetSkeletonJointOrientation()\l+ IsTracking()\l+ IsCalibrated()\l+ IsCalibrating()\l+ RequestCalibration()\l+ AbortCalibration()\l+ SaveCalibrationDataToFile()\l+ LoadCalibrationDataFromFile()\l+ SaveCalibrationData()\l+ LoadCalibrationData()\l+ ClearCalibrationData()\l+ IsCalibrationData()\l+ StartTracking()\l+ StopTracking()\l+ Reset()\l+ NeedPoseForCalibration()\l+ GetCalibrationPose()\l+ SetSmoothing()\l+ RegisterCalibrationCallbacks()\l+ UnregisterCalibrationCallbacks()\l+ RegisterToCalibrationStart()\l+ UnregisterFromCalibrationStart()\l+ RegisterToCalibrationInProgress()\l+ UnregisterFromCalibrationInProgress()\l+ RegisterToCalibrationComplete()\l+ UnregisterFromCalibrationComplete()\l- CalibrationStartBundleCallback()\l- CalibrationEndBundleCallback()\l- CalibrationStartCallback()\l- CalibrationInProgressCallback()\l- CalibrationCompleteCallback()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_skeleton_capability.html"];
  Node1 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node14 [label="{xn::UserPositionCapability\n||+ UserPositionCapability()\l+ UserPositionCapability()\l+ GetSupportedUserPositionsCount()\l+ SetUserPosition()\l+ GetUserPosition()\l+ RegisterToUserPositionChange()\l+ UnregisterFromUserPositionChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_user_position_capability.html"];
}
