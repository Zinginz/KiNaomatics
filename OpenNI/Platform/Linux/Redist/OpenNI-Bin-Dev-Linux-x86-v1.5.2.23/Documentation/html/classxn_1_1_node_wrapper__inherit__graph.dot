digraph G
{
  edge [fontname="FreeSans",fontsize="10",labelfontname="FreeSans",labelfontsize="10"];
  node [fontname="FreeSans",fontsize="10",shape=record];
  Node1 [label="{xn::NodeWrapper\n|- m_hNode\l- m_hShuttingDownCallback\l|+ NodeWrapper()\l+ NodeWrapper()\l+ operator=()\l+ ~NodeWrapper()\l+ operator XnNodeHandle()\l+ GetHandle()\l+ operator==()\l+ operator!=()\l+ IsValid()\l+ GetName()\l+ AddRef()\l+ Release()\l+ Ref()\l+ Unref()\l+ SetHandle()\l+ TakeOwnership()\l- ContextShuttingDownCallback()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node2 [label="{xn::Capability\n||+ Capability()\l+ Capability()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_capability.html"];
  Node2 -> Node3 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node3 [label="{xn::AlternativeViewPointCapability\n||+ AlternativeViewPointCapability()\l+ AlternativeViewPointCapability()\l+ IsViewPointSupported()\l+ SetViewPoint()\l+ ResetViewPoint()\l+ IsViewPointAs()\l+ RegisterToViewPointChange()\l+ UnregisterFromViewPointChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_alternative_view_point_capability.html"];
  Node2 -> Node4 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node4 [label="{xn::AntiFlickerCapability\n||+ AntiFlickerCapability()\l+ AntiFlickerCapability()\l+ SetPowerLineFrequency()\l+ GetPowerLineFrequency()\l+ RegisterToPowerLineFrequencyChange()\l+ UnregisterFromPowerLineFrequencyChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_anti_flicker_capability.html"];
  Node2 -> Node5 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node5 [label="{xn::CroppingCapability\n||+ CroppingCapability()\l+ CroppingCapability()\l+ SetCropping()\l+ GetCropping()\l+ RegisterToCroppingChange()\l+ UnregisterFromCroppingChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_cropping_capability.html"];
  Node2 -> Node6 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node6 [label="{xn::DeviceIdentificationCapability\n||+ DeviceIdentificationCapability()\l+ DeviceIdentificationCapability()\l+ GetDeviceName()\l+ GetVendorSpecificData()\l+ GetSerialNumber()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_device_identification_capability.html"];
  Node2 -> Node7 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node7 [label="{xn::ErrorStateCapability\n||+ ErrorStateCapability()\l+ ErrorStateCapability()\l+ GetErrorState()\l+ RegisterToErrorStateChange()\l+ UnregisterFromErrorStateChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_error_state_capability.html"];
  Node2 -> Node8 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node8 [label="{xn::FrameSyncCapability\n||+ FrameSyncCapability()\l+ FrameSyncCapability()\l+ RegisterToFrameSyncChange()\l+ UnregisterFromFrameSyncChange()\l+ CanFrameSyncWith()\l+ FrameSyncWith()\l+ StopFrameSyncWith()\l+ IsFrameSyncedWith()\l* CanFrameSyncWith()\l* FrameSyncWith()\l* StopFrameSyncWith()\l* IsFrameSyncedWith()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_frame_sync_capability.html"];
  Node2 -> Node9 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node9 [label="{xn::GeneralIntCapability\n|- m_strCap\l|+ GeneralIntCapability()\l+ GeneralIntCapability()\l+ GetRange()\l+ Get()\l+ Set()\l+ RegisterToValueChange()\l+ UnregisterFromValueChange()\l* RegisterToValueChange()\l* UnregisterFromValueChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_general_int_capability.html"];
  Node2 -> Node10 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node10 [label="{xn::HandTouchingFOVEdgeCapability\n||+ HandTouchingFOVEdgeCapability()\l+ HandTouchingFOVEdgeCapability()\l+ RegisterToHandTouchingFOVEdge()\l+ UnregisterFromHandTouchingFOVEdge()\l- HandTouchingFOVEdgeCB()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_hand_touching_f_o_v_edge_capability.html"];
  Node2 -> Node11 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node11 [label="{xn::MirrorCapability\n||+ MirrorCapability()\l+ MirrorCapability()\l+ SetMirror()\l+ IsMirrored()\l+ RegisterToMirrorChange()\l+ UnregisterFromMirrorChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_mirror_capability.html"];
  Node2 -> Node12 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node12 [label="{xn::PoseDetectionCapability\n||+ PoseDetectionCapability()\l+ PoseDetectionCapability()\l+ GetNumberOfPoses()\l+ GetAvailablePoses()\l+ GetAllAvailablePoses()\l+ IsPoseSupported()\l+ GetPoseStatus()\l+ StartPoseDetection()\l+ StopPoseDetection()\l+ StopSinglePoseDetection()\l+ RegisterToPoseCallbacks()\l+ UnregisterFromPoseCallbacks()\l+ RegisterToPoseDetected()\l+ RegisterToOutOfPose()\l+ UnregisterFromPoseDetected()\l+ UnregisterFromOutOfPose()\l+ RegisterToPoseInProgress()\l+ UnregisterFromPoseInProgress()\l- PoseDetectionStartBundleCallback()\l- PoseDetectionStartEndBundleCallback()\l- PoseDetectionCallback()\l- PoseDetectionInProgressCallback()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_pose_detection_capability.html"];
  Node2 -> Node13 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node13 [label="{xn::SkeletonCapability\n||+ SkeletonCapability()\l+ SkeletonCapability()\l+ IsJointAvailable()\l+ IsProfileAvailable()\l+ SetSkeletonProfile()\l+ SetJointActive()\l+ IsJointActive()\l+ IsJointActive()\l+ RegisterToJointConfigurationChange()\l+ UnregisterFromJointConfigurationChange()\l+ EnumerateActiveJoints()\l+ GetSkeletonJoint()\l+ GetSkeletonJointPosition()\l+ GetSkeletonJointOrientation()\l+ IsTracking()\l+ IsCalibrated()\l+ IsCalibrating()\l+ RequestCalibration()\l+ AbortCalibration()\l+ SaveCalibrationDataToFile()\l+ LoadCalibrationDataFromFile()\l+ SaveCalibrationData()\l+ LoadCalibrationData()\l+ ClearCalibrationData()\l+ IsCalibrationData()\l+ StartTracking()\l+ StopTracking()\l+ Reset()\l+ NeedPoseForCalibration()\l+ GetCalibrationPose()\l+ SetSmoothing()\l+ RegisterCalibrationCallbacks()\l+ UnregisterCalibrationCallbacks()\l+ RegisterToCalibrationStart()\l+ UnregisterFromCalibrationStart()\l+ RegisterToCalibrationInProgress()\l+ UnregisterFromCalibrationInProgress()\l+ RegisterToCalibrationComplete()\l+ UnregisterFromCalibrationComplete()\l- CalibrationStartBundleCallback()\l- CalibrationEndBundleCallback()\l- CalibrationStartCallback()\l- CalibrationInProgressCallback()\l- CalibrationCompleteCallback()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_skeleton_capability.html"];
  Node2 -> Node14 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node14 [label="{xn::UserPositionCapability\n||+ UserPositionCapability()\l+ UserPositionCapability()\l+ GetSupportedUserPositionsCount()\l+ SetUserPosition()\l+ GetUserPosition()\l+ RegisterToUserPositionChange()\l+ UnregisterFromUserPositionChange()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_user_position_capability.html"];
  Node1 -> Node15 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node15 [label="{xn::ProductionNode\n||+ ProductionNode()\l+ ProductionNode()\l+ GetInfo()\l+ AddNeededNode()\l+ RemoveNeededNode()\l+ IsCapabilitySupported()\l+ SetIntProperty()\l+ SetRealProperty()\l+ SetStringProperty()\l+ SetGeneralProperty()\l+ GetIntProperty()\l+ GetRealProperty()\l+ GetStringProperty()\l+ GetGeneralProperty()\l+ LockForChanges()\l+ UnlockForChanges()\l+ LockedNodeStartChanges()\l+ LockedNodeEndChanges()\l+ GetErrorStateCap()\l+ GetErrorStateCap()\l+ GetGeneralIntCap()\l+ GetContext()\l* GetContext()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_production_node.html"];
  Node15 -> Node16 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node16 [label="{xn::Codec\n||+ Codec()\l+ Codec()\l+ GetCodecID()\l+ EncodeData()\l+ DecodeData()\l+ Create()\l* Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_codec.html"];
  Node15 -> Node17 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node17 [label="{xn::Device\n||+ Device()\l+ Device()\l+ GetIdentificationCap()\l+ Create()\l* Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_device.html"];
  Node15 -> Node18 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node18 [label="{xn::Generator\n||+ Generator()\l+ Generator()\l+ StartGenerating()\l+ IsGenerating()\l+ StopGenerating()\l+ RegisterToGenerationRunningChange()\l+ UnregisterFromGenerationRunningChange()\l+ RegisterToNewDataAvailable()\l+ UnregisterFromNewDataAvailable()\l+ IsNewDataAvailable()\l+ WaitAndUpdateData()\l+ IsDataNew()\l+ GetData()\l+ GetDataSize()\l+ GetTimestamp()\l+ GetFrameID()\l+ GetMirrorCap()\l+ GetMirrorCap()\l+ GetAlternativeViewPointCap()\l+ GetAlternativeViewPointCap()\l+ GetFrameSyncCap()\l+ GetFrameSyncCap()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_generator.html"];
  Node18 -> Node19 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node19 [label="{xn::AudioGenerator\n||+ AudioGenerator()\l+ AudioGenerator()\l+ GetMetaData()\l+ GetAudioBuffer()\l+ GetSupportedWaveOutputModesCount()\l+ GetSupportedWaveOutputModes()\l+ SetWaveOutputMode()\l+ GetWaveOutputMode()\l+ RegisterToWaveOutputModeChanges()\l+ UnregisterFromWaveOutputModeChanges()\l+ Create()\l* Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_audio_generator.html"];
  Node19 -> Node20 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node20 [label="{xn::MockAudioGenerator\n||+ MockAudioGenerator()\l+ MockAudioGenerator()\l+ SetData()\l+ SetData()\l+ SetData()\l+ Create()\l+ CreateBasedOn()\l* Create()\l* CreateBasedOn()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_mock_audio_generator.html"];
  Node18 -> Node21 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node21 [label="{xn::GestureGenerator\n||+ GestureGenerator()\l+ GestureGenerator()\l+ AddGesture()\l+ RemoveGesture()\l+ GetActiveGestures()\l+ GetAllActiveGestures()\l+ EnumerateGestures()\l+ GetNumberOfAvailableGestures()\l+ EnumerateAllGestures()\l+ IsGestureAvailable()\l+ IsGestureProgressSupported()\l+ RegisterGestureCallbacks()\l+ UnregisterGestureCallbacks()\l+ RegisterToGestureChange()\l+ UnregisterFromGestureChange()\l+ RegisterToGestureIntermediateStageCompleted()\l+ UnregisterFromGestureIntermediateStageCompleted()\l+ RegisterToGestureReadyForNextIntermediateStage()\l+ UnregisterFromGestureReadyForNextIntermediateStageCallbacks()\l+ Create()\l- GestureRecognizedCallback()\l- GestureProgressCallback()\l- GestureIntermediateStageCompletedCallback()\l- GestureReadyForNextIntermediateStageCallback()\l* Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_gesture_generator.html"];
  Node18 -> Node22 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node22 [label="{xn::HandsGenerator\n||+ HandsGenerator()\l+ HandsGenerator()\l+ RegisterHandCallbacks()\l+ UnregisterHandCallbacks()\l+ StopTracking()\l+ StopTrackingAll()\l+ StartTracking()\l+ SetSmoothing()\l+ GetHandTouchingFOVEdgeCap()\l+ GetHandTouchingFOVEdgeCap()\l+ Create()\l- HandCreateCB()\l- HandUpdateCB()\l- HandDestroyCB()\l* Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_hands_generator.html"];
  Node18 -> Node23 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node23 [label="{xn::MapGenerator\n||+ MapGenerator()\l+ MapGenerator()\l+ GetSupportedMapOutputModesCount()\l+ GetSupportedMapOutputModes()\l+ SetMapOutputMode()\l+ GetMapOutputMode()\l+ GetBytesPerPixel()\l+ RegisterToMapOutputModeChange()\l+ UnregisterFromMapOutputModeChange()\l+ GetCroppingCap()\l+ GetCroppingCap()\l+ GetBrightnessCap()\l+ GetContrastCap()\l+ GetHueCap()\l+ GetSaturationCap()\l+ GetSharpnessCap()\l+ GetGammaCap()\l+ GetWhiteBalanceCap()\l+ GetBacklightCompensationCap()\l+ GetGainCap()\l+ GetPanCap()\l+ GetTiltCap()\l+ GetRollCap()\l+ GetZoomCap()\l+ GetExposureCap()\l+ GetIrisCap()\l+ GetFocusCap()\l+ GetLowLightCompensationCap()\l+ GetAntiFlickerCap()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_map_generator.html"];
  Node23 -> Node24 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node24 [label="{xn::DepthGenerator\n||+ DepthGenerator()\l+ DepthGenerator()\l+ GetMetaData()\l+ GetDepthMap()\l+ GetDeviceMaxDepth()\l+ GetFieldOfView()\l+ RegisterToFieldOfViewChange()\l+ UnregisterFromFieldOfViewChange()\l+ ConvertProjectiveToRealWorld()\l+ ConvertRealWorldToProjective()\l+ GetUserPositionCap()\l+ GetUserPositionCap()\l+ Create()\l* Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_depth_generator.html"];
  Node24 -> Node25 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node25 [label="{xn::MockDepthGenerator\n||+ MockDepthGenerator()\l+ MockDepthGenerator()\l+ SetData()\l+ SetData()\l+ SetData()\l+ Create()\l+ CreateBasedOn()\l* Create()\l* CreateBasedOn()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_mock_depth_generator.html"];
  Node23 -> Node26 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node26 [label="{xn::ImageGenerator\n||+ ImageGenerator()\l+ ImageGenerator()\l+ GetMetaData()\l+ GetRGB24ImageMap()\l+ GetYUV422ImageMap()\l+ GetGrayscale8ImageMap()\l+ GetGrayscale16ImageMap()\l+ GetImageMap()\l+ IsPixelFormatSupported()\l+ SetPixelFormat()\l+ GetPixelFormat()\l+ RegisterToPixelFormatChange()\l+ UnregisterFromPixelFormatChange()\l+ Create()\l* Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_image_generator.html"];
  Node26 -> Node27 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node27 [label="{xn::MockImageGenerator\n||+ MockImageGenerator()\l+ MockImageGenerator()\l+ SetData()\l+ SetData()\l+ SetData()\l+ Create()\l+ CreateBasedOn()\l* Create()\l* CreateBasedOn()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_mock_image_generator.html"];
  Node23 -> Node28 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node28 [label="{xn::IRGenerator\n||+ IRGenerator()\l+ IRGenerator()\l+ GetMetaData()\l+ GetIRMap()\l+ Create()\l* Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_i_r_generator.html"];
  Node28 -> Node29 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node29 [label="{xn::MockIRGenerator\n||+ MockIRGenerator()\l+ MockIRGenerator()\l+ SetData()\l+ SetData()\l+ SetData()\l+ Create()\l+ CreateBasedOn()\l* Create()\l* CreateBasedOn()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_mock_i_r_generator.html"];
  Node23 -> Node30 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node30 [label="{xn::SceneAnalyzer\n||+ SceneAnalyzer()\l+ SceneAnalyzer()\l+ GetMetaData()\l+ GetLabelMap()\l+ GetFloor()\l+ Create()\l* Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_scene_analyzer.html"];
  Node18 -> Node31 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node31 [label="{xn::MockRawGenerator\n||+ MockRawGenerator()\l+ MockRawGenerator()\l+ SetData()\l+ Create()\l* Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_mock_raw_generator.html"];
  Node18 -> Node32 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node32 [label="{xn::UserGenerator\n||+ UserGenerator()\l+ UserGenerator()\l+ GetNumberOfUsers()\l+ GetUsers()\l+ GetCoM()\l+ GetUserPixels()\l+ RegisterUserCallbacks()\l+ UnregisterUserCallbacks()\l+ GetSkeletonCap()\l+ GetSkeletonCap()\l+ GetPoseDetectionCap()\l+ GetPoseDetectionCap()\l+ RegisterToUserExit()\l+ UnregisterFromUserExit()\l+ RegisterToUserReEnter()\l+ UnregisterFromUserReEnter()\l+ Create()\l- NewUserCallback()\l- LostUserCallback()\l- UserSingleCallback()\l* Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_user_generator.html"];
  Node15 -> Node33 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node33 [label="{xn::Player\n||+ Player()\l+ Player()\l+ SetRepeat()\l+ SetSource()\l+ GetSource()\l+ ReadNext()\l+ SeekToTimeStamp()\l+ SeekToFrame()\l+ TellTimestamp()\l+ TellFrame()\l+ GetNumFrames()\l+ GetSupportedFormat()\l+ EnumerateNodes()\l+ IsEOF()\l+ RegisterToEndOfFileReached()\l+ UnregisterFromEndOfFileReached()\l+ SetPlaybackSpeed()\l+ GetPlaybackSpeed()\l+ Create()\l* Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_player.html"];
  Node15 -> Node34 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node34 [label="{xn::Recorder\n||+ Recorder()\l+ Recorder()\l+ SetDestination()\l+ GetDestination()\l+ AddNodeToRecording()\l+ RemoveNodeFromRecording()\l+ Record()\l+ Create()\l* Create()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_recorder.html"];
  Node15 -> Node35 [dir=back,color="midnightblue",fontsize="10",style="solid",arrowtail="empty",fontname="FreeSans"];
  Node35 [label="{xn::ScriptNode\n||+ ScriptNode()\l+ ScriptNode()\l+ GetSupportedFormat()\l+ LoadScriptFromFile()\l+ LoadScriptFromString()\l+ Create()\l+ Run()\l* Create()\l* Run()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classxn_1_1_script_node.html"];
}
